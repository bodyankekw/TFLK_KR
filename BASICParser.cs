//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BASIC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace tf9ik {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class BASICParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		LETTER=10, DIGIT=11, WS=12;
	public const int
		RULE_program = 0, RULE_declaration = 1, RULE_declarationWithoutMod = 2, 
		RULE_accessModifier = 3, RULE_identifier = 4, RULE_dataType = 5, RULE_constant = 6;
	public static readonly string[] ruleNames = {
		"program", "declaration", "declarationWithoutMod", "accessModifier", "identifier", 
		"dataType", "constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'As'", "'='", "'Dim'", "'Public'", "'Private'", "'Double'", 
		"'Integer'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "LETTER", 
		"DIGIT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BASIC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BASICParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BASICParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BASICParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BASICParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationWithoutModContext[] declarationWithoutMod() {
			return GetRuleContexts<DeclarationWithoutModContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationWithoutModContext declarationWithoutMod(int i) {
			return GetRuleContext<DeclarationWithoutModContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			declaration();
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 15;
				Match(T__0);
				State = 16;
				declarationWithoutMod();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AccessModifierContext accessModifier() {
			return GetRuleContext<AccessModifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			accessModifier();
			State = 25;
			identifier();
			State = 26;
			Match(T__1);
			State = 27;
			dataType();
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 28;
				Match(T__2);
				State = 29;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationWithoutModContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public DeclarationWithoutModContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationWithoutMod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDeclarationWithoutMod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDeclarationWithoutMod(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationWithoutModContext declarationWithoutMod() {
		DeclarationWithoutModContext _localctx = new DeclarationWithoutModContext(Context, State);
		EnterRule(_localctx, 4, RULE_declarationWithoutMod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			identifier();
			State = 33;
			Match(T__1);
			State = 34;
			dataType();
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 35;
				Match(T__2);
				State = 36;
				constant();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessModifierContext : ParserRuleContext {
		public AccessModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterAccessModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitAccessModifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessModifierContext accessModifier() {
		AccessModifierContext _localctx = new AccessModifierContext(Context, State);
		EnterRule(_localctx, 6, RULE_accessModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 112L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LETTER() { return GetTokens(BASICParser.LETTER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LETTER(int i) {
			return GetToken(BASICParser.LETTER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(LETTER);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LETTER || _la==DIGIT) {
				{
				{
				State = 42;
				_la = TokenStream.LA(1);
				if ( !(_la==LETTER || _la==DIGIT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_dataType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==T__7) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DIGIT() { return GetTokens(BASICParser.DIGIT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIGIT(int i) {
			return GetToken(BASICParser.DIGIT, i);
		}
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBASICListener typedListener = listener as IBASICListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 12, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 50;
				Match(DIGIT);
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==DIGIT );
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 55;
				Match(T__8);
				State = 59;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DIGIT) {
					{
					{
					State = 56;
					Match(DIGIT);
					}
					}
					State = 61;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,12,65,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,
		1,31,8,1,1,2,1,2,1,2,1,2,1,2,3,2,38,8,2,1,3,1,3,1,4,1,4,5,4,44,8,4,10,
		4,12,4,47,9,4,1,5,1,5,1,6,4,6,52,8,6,11,6,12,6,53,1,6,1,6,5,6,58,8,6,10,
		6,12,6,61,9,6,3,6,63,8,6,1,6,0,0,7,0,2,4,6,8,10,12,0,3,1,0,4,6,1,0,10,
		11,1,0,7,8,64,0,14,1,0,0,0,2,24,1,0,0,0,4,32,1,0,0,0,6,39,1,0,0,0,8,41,
		1,0,0,0,10,48,1,0,0,0,12,51,1,0,0,0,14,19,3,2,1,0,15,16,5,1,0,0,16,18,
		3,4,2,0,17,15,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,19,20,1,0,0,0,20,22,
		1,0,0,0,21,19,1,0,0,0,22,23,5,0,0,1,23,1,1,0,0,0,24,25,3,6,3,0,25,26,3,
		8,4,0,26,27,5,2,0,0,27,30,3,10,5,0,28,29,5,3,0,0,29,31,3,12,6,0,30,28,
		1,0,0,0,30,31,1,0,0,0,31,3,1,0,0,0,32,33,3,8,4,0,33,34,5,2,0,0,34,37,3,
		10,5,0,35,36,5,3,0,0,36,38,3,12,6,0,37,35,1,0,0,0,37,38,1,0,0,0,38,5,1,
		0,0,0,39,40,7,0,0,0,40,7,1,0,0,0,41,45,5,10,0,0,42,44,7,1,0,0,43,42,1,
		0,0,0,44,47,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,9,1,0,0,0,47,45,1,0,
		0,0,48,49,7,2,0,0,49,11,1,0,0,0,50,52,5,11,0,0,51,50,1,0,0,0,52,53,1,0,
		0,0,53,51,1,0,0,0,53,54,1,0,0,0,54,62,1,0,0,0,55,59,5,9,0,0,56,58,5,11,
		0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,63,1,0,
		0,0,61,59,1,0,0,0,62,55,1,0,0,0,62,63,1,0,0,0,63,13,1,0,0,0,7,19,30,37,
		45,53,59,62
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace tf9ik
